diff --git a/node/src/chain_spec.rs b/node/src/chain_spec.rs
index 132a96dac..fae039fe8 100644
--- a/node/src/chain_spec.rs
+++ b/node/src/chain_spec.rs
@@ -269,7 +269,7 @@ pub fn kusama_mainnet_config() -> ChainSpec {
 					),
 				],
 				vec![(DOT_TOKEN_ID, None)],
-				2000.into(),
+				2001.into(),
 			)
 		},
 		Vec::new(),
@@ -440,7 +440,7 @@ pub fn public_testnet_config() -> ChainSpec {
 					),
 				],
 				vec![(DOT_TOKEN_ID, None)],
-				2000.into(),
+				2001.into(),
 			)
 		},
 		Vec::new(),
@@ -453,7 +453,7 @@ pub fn public_testnet_config() -> ChainSpec {
 		Some(properties),
 		Extensions {
 			relay_chain: "rococo-local".into(), // You MUST set this to the correct network!
-			para_id: 2000,
+			para_id: 2001,
 		},
 	)
 }
@@ -603,7 +603,7 @@ pub fn development_config() -> ChainSpec {
 					),
 				],
 				vec![(DOT_TOKEN_ID, None)],
-				2000.into(),
+				2001.into(),
 			)
 		},
 		Vec::new(),
@@ -616,7 +616,7 @@ pub fn development_config() -> ChainSpec {
 		Some(properties),
 		Extensions {
 			relay_chain: "rococo-local".into(), // You MUST set this to the correct network!
-			para_id: 2000,
+			para_id: 2001,
 		},
 	)
 }
@@ -766,7 +766,7 @@ pub fn local_config() -> ChainSpec {
 					),
 				],
 				vec![(DOT_TOKEN_ID, None)],
-				2000.into(),
+				2001.into(),
 			)
 		},
 		// Bootnodes
@@ -782,7 +782,7 @@ pub fn local_config() -> ChainSpec {
 		// Extensions
 		Extensions {
 			relay_chain: "rococo-local".into(), // You MUST set this to the correct network!
-			para_id: 2000,
+			para_id: 2001,
 		},
 	)
 }
diff --git a/runtime/src/lib.rs b/runtime/src/lib.rs
index dcd3d5155..d4004bd58 100644
--- a/runtime/src/lib.rs
+++ b/runtime/src/lib.rs
@@ -502,7 +502,7 @@ impl pallet_xyk::Config for Runtime {
 	type PoolFeePercentage = frame_support::traits::ConstU128<20>;
 	type TreasuryFeePercentage = frame_support::traits::ConstU128<5>;
 	type BuyAndBurnFeePercentage = frame_support::traits::ConstU128<5>;
-	type RewardsDistributionPeriod = frame_support::traits::ConstU32<10000>;
+	type RewardsDistributionPeriod = frame_support::traits::ConstU32<50>;
 }
 
 type ORMLCurrencyAdapterNegativeImbalance = <orml_tokens::CurrencyAdapter::<Runtime, MgaTokenId> as PalletCurrency<AccountId>>::NegativeImbalance;
@@ -797,7 +797,7 @@ parameter_types! {
 	pub const VotingBondBase: Balance = deposit(1, 64);
 	// additional data per vote is 32 bytes (account id).
 	pub const VotingBondFactor: Balance = deposit(0, 32);
-	pub const TermDuration: BlockNumber = 120 * DAYS;
+	pub const TermDuration: BlockNumber = 5 * MINUTES;
 	pub const DesiredMembers: u32 = 9;
 	pub const DesiredRunnersUp: u32 = 7;
 	pub const ElectionsPhragmenPalletId: LockIdentifier = *b"phrelect";
@@ -828,7 +828,7 @@ impl pallet_elections_phragmen::Config for Runtime {
 
 parameter_types! {
 	/// Default BlocksPerRound is every 4 hours (1200 * 12 second block times)
-	pub const BlocksPerRound: u32 = 4 * HOURS;
+	pub const BlocksPerRound: u32 = 2 * MINUTES;
 	/// Collator candidate exit delay (number of rounds)
 	pub const LeaveCandidatesDelay: u32 = 2;
 	/// Collator candidate bond increases/decreases delay (number of rounds)
